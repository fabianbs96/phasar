API Compatibility:
- conventional versioning strategy
    - semver / calver
    - Linux common: libExample.so[.2|.2.4.7] => Major version important https://youtu.be/m0DwB4OvDXk?t=932
        - set_target_properties(Example PROPERTIES SOVERSION 2 VERSION 2.4.7)
            - missing SOVERSION => libExample.so.2.4.7 is linked against instead of libExample.so.2 <- maybe you want it, maybe not

- find_package(SomeProj 2.3) -> looks for prebuild packages on your system
    - SomeProjConfig.cmake <=> someproj-config.cmake (identical, just 2 naming conventions)
    - Same with SomeProjConfigVersion.cmake, not provided = installation probably never used, cmake will skip it if specific version is requested
        - include(CMakePackageConfigHelpers)
        - write_basic_package_version_file(SomeProjConfigVersion.cmake VERSION 2.4.7 COMPATIBILITY SameMajorVersion)
            - ExactVersion = not backwards Compatibility
        - 2.3 requested -> 2.4.7 => same major check, 2.4.7 newer as 2.3 = satisfied
- packaging types: https://youtu.be/m0DwB4OvDXk?t=1592
    - by us
    - as embedded dependency
    - by distribution maintainer
    - by package managers not part of os    
- 5 out of 10 CMake 3.14+: install(TARGETS Example)
- 8 out of 10 CMake 3.12+: install(TARGETS Example DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT Runtime ... Development)
- but for git submodules, "fetch_content" aso, to differentiate between multiple
    - 10* out of 10 ... COMPONENT SomeProj_RunTime
- + Exporting Targets

Optional:
- CMake Visibility Control: https://youtu.be/m0DwB4OvDXk?t=613


CMakeLists migration needed:
https://github.com/fabianbs96/phasar/commit/7c2df98af1b2c16103f62861fc2992314c6b7a63#diff-1e7de1ae2d059d21e1dd75d5812d5a34b0222cef273b7c3a2af62eb747f9d20a
https://github.com/fabianbs96/phasar/commit/8f727f07cb8da6cf332f87dd4b8f79e1d416a74a
phasar/llvm/test/src/DataFlowSolver/IfdsIde/Problems/IDELinearConstantAnalysisTest.cpp:205:TEST_F(IDELinearConstantAnalysisTest, HandleBasicTest_Swift_01) {